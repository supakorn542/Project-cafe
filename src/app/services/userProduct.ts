import { db } from "../lib/firebase";
import { collection, doc, getDocs, query, where, getDoc } from "firebase/firestore";
import { OptionInterface } from "../interfaces/optioninterface";
import { OptionItem } from "../interfaces/optionItemInterface";
import { Product } from "../interfaces/product";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Firestore
export const getAllProducts = async () => {

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å collection "status"
    const statusSnapshot = await getDocs(collection(db, "status"));

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• status ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ status_id ‡πÄ‡∏õ‡πá‡∏ô key
    const statusMap: Record<string, string> = statusSnapshot.docs.reduce((acc, statusDoc) => {
      const statusData = statusDoc.data();
      
      // ‡πÉ‡∏ä‡πâ statusDoc.id ‡πÅ‡∏ó‡∏ô statusData.id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ id ‡∏Ç‡∏≠‡∏á document
      if (statusDoc.id) {
        acc[statusDoc.id] = statusData.name; // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lookup ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ id
      } else {

      }
    
      return acc;
    }, {} as Record<string, string>);
    


  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô "products"
  const productsSnapshot = await getDocs(collection(db, "products"));

  // map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ document ‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô products
  const products = productsSnapshot.docs.map((productDoc) => {
    const productData = productDoc.data();

    // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà id ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å product
    return {
      id: productDoc.id,  // ‡πÄ‡∏û‡∏¥‡πà‡∏° id ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      name: productData.name,  // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå
      description: productData.description,  // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
      price: productData.price,  // ‡∏£‡∏≤‡∏Ñ‡∏≤
      calorie: productData.calorie,  // ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà
      productType_id: productData.productType_id.id  || productData.productType_id,  // ID ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      status_id: productData.status_id.id || productData.status_id,  // ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      imageProduct : productData.imageProduct, //
    };
  });



  const availableProducts = products.filter(product => statusMap[product.status_id] === "available");

  return availableProducts; 
}

export const getAllProductTypes = async () => {
  const productTypesSnapshot = await getDocs(collection(db, "productTypes")); // ‡πÅ‡∏ó‡∏ô "productTypes" ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡πÄ‡∏•‡∏Å‡∏ä‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  return productTypesSnapshot.docs.map((doc) => ({
    id: doc.id,
    name: doc.data().name,
  }));
};


export const fetchProductById = async (productId: string): Promise<Product | null> => {
  try {
    const productRef = doc(db, "products", productId);
    const productDoc = await getDoc(productRef);

    if (productDoc.exists()) {
      const data = productDoc.data();

      // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Product interface
      return {
        id: productDoc.id, // id ‡∏°‡∏≤‡∏à‡∏≤‡∏Å document
        name: data.name || "Unnamed Product",
        description: data.description || "",
        price: data.price || 0,
        calorie: data.calorie || 0,
        productType_id: data.productType_id || "",
        status_id: data.status_id || "",
        imageProduct: data.imageProduct || "",
      };
    } else {
      return null;
    }
  } catch (error) {
    ;
    throw error;
  }
};




export const fetchOptionsByProductId = async (productId: string): Promise<OptionInterface[]> => {
  try {
    const productOptionsQuery = query(
      collection(db, "productOptions"),
      where("product_id", "==", doc(db, "products", productId))
    );
    const productOptionsSnapshot = await getDocs(productOptionsQuery);

    

    const optionRefs = productOptionsSnapshot.docs.flatMap(doc => doc.data().option_id || []);
    
    if (optionRefs.length === 0) {

      return [];
    }

    const options = await Promise.all(
      optionRefs.map(async (optionRef) => {
        const optionDoc = await getDoc(optionRef);
        if (!optionDoc.exists()) return null;

        const data = optionDoc.data();
        if (!data || typeof data !== "object") return null;

        return { id: optionDoc.id, ...data } as OptionInterface;
      })
    );
    

    return options.filter((option): option is OptionInterface => option !== null);
  } catch (error) {
    ;
    return [];
  }
};

export const fetchOptionItemsByOptionIds = async (
  optionIds: string[]
): Promise<Record<string, OptionItem[]>> => {
  try {
    if (optionIds.length === 0) {
      return {};
    }

    const optionItemsQuery = query(
      collection(db, "optionItems"),
      where("option_id", "in", optionIds.map(id => doc(db, "options", id)))
    );
    const optionItemsSnapshot = await getDocs(optionItemsQuery);

    const groupedOptionItems: Record<string, OptionItem[]> = {};

    optionItemsSnapshot.docs.forEach(doc => {
      const data = doc.data() as OptionItem;
      const optionId = (data.option_id as any).id; // Extract the `option_id` reference
    
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `optionId` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
      if (!groupedOptionItems[optionId]) {
        groupedOptionItems[optionId] = [];
      }
    
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° item ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° `id` ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
      groupedOptionItems[optionId].push({ ...data, id: doc.id });
    });
    

    return groupedOptionItems;
  } catch (error) {
    ;
    return {};
  }
};


export async function getProductsByType(productTypeName: string) {
  try {
    // üîπ 1. Query ‡∏´‡∏≤ productType ID ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠
    const productTypeQuery = query(
      collection(db, "productTypes"),
      where("name", "==", productTypeName)
    );
    const productTypeQuerySnapshot = await getDocs(productTypeQuery);
    

    if (productTypeQuerySnapshot.empty) return [];

    // üîπ 2. ‡∏î‡∏∂‡∏á productType ID
    const productTypeId = productTypeQuerySnapshot.docs[0].id;

    // üîπ 3. Query ‡∏´‡∏≤ products ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á productTypeId
    const productsQuery = query(
      collection(db, "products"),
      where("productType_id", "==", doc(db, `productTypes/${productTypeId}`)) // ‡πÉ‡∏ä‡πâ Firestore Reference
    );
    const productsQuerySnapshot = await getDocs(productsQuery);
    

    // üîπ 4. Map ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• products ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    return productsQuerySnapshot.docs.map((doc) => ({
      id: doc.id,
      ...doc.data(),
    }));
  } catch (error) {
    ;
    return [];
  }
}